// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.JsonValue
import com.withorb.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class CustomerTest {

    @Test
    fun create() {
        val customer =
            Customer.builder()
                .id("id")
                .addAdditionalEmail("string")
                .autoCollection(true)
                .balance("balance")
                .billingAddress(
                    Address.builder()
                        .city("city")
                        .country("country")
                        .line1("line1")
                        .line2("line2")
                        .postalCode("postal_code")
                        .state("state")
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currency("currency")
                .email("email")
                .emailDelivery(true)
                .exemptFromAutomatedTax(true)
                .externalCustomerId("external_customer_id")
                .hierarchy(
                    Customer.Hierarchy.builder()
                        .addChild(
                            CustomerMinified.builder()
                                .id("id")
                                .externalCustomerId("external_customer_id")
                                .build()
                        )
                        .parent(
                            CustomerMinified.builder()
                                .id("id")
                                .externalCustomerId("external_customer_id")
                                .build()
                        )
                        .build()
                )
                .metadata(
                    Customer.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .name("name")
                .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                .paymentProviderId("payment_provider_id")
                .portalUrl("portal_url")
                .shippingAddress(
                    Address.builder()
                        .city("city")
                        .country("country")
                        .line1("line1")
                        .line2("line2")
                        .postalCode("postal_code")
                        .state("state")
                        .build()
                )
                .taxId(
                    CustomerTaxId.builder()
                        .country(CustomerTaxId.Country.AD)
                        .type(CustomerTaxId.Type.AD_NRT)
                        .value("value")
                        .build()
                )
                .timezone("timezone")
                .accountingSyncConfiguration(
                    Customer.AccountingSyncConfiguration.builder()
                        .addAccountingProvider(
                            Customer.AccountingSyncConfiguration.AccountingProvider.builder()
                                .externalProviderId("external_provider_id")
                                .providerType(
                                    Customer.AccountingSyncConfiguration.AccountingProvider
                                        .ProviderType
                                        .QUICKBOOKS
                                )
                                .build()
                        )
                        .excluded(true)
                        .build()
                )
                .reportingConfiguration(
                    Customer.ReportingConfiguration.builder().exempt(true).build()
                )
                .build()

        assertThat(customer.id()).isEqualTo("id")
        assertThat(customer.additionalEmails()).containsExactly("string")
        assertThat(customer.autoCollection()).isEqualTo(true)
        assertThat(customer.balance()).isEqualTo("balance")
        assertThat(customer.billingAddress())
            .isEqualTo(
                Address.builder()
                    .city("city")
                    .country("country")
                    .line1("line1")
                    .line2("line2")
                    .postalCode("postal_code")
                    .state("state")
                    .build()
            )
        assertThat(customer.createdAt()).isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(customer.currency()).isEqualTo("currency")
        assertThat(customer.email()).isEqualTo("email")
        assertThat(customer.emailDelivery()).isEqualTo(true)
        assertThat(customer.exemptFromAutomatedTax()).isEqualTo(true)
        assertThat(customer.externalCustomerId()).isEqualTo("external_customer_id")
        assertThat(customer.hierarchy())
            .isEqualTo(
                Customer.Hierarchy.builder()
                    .addChild(
                        CustomerMinified.builder()
                            .id("id")
                            .externalCustomerId("external_customer_id")
                            .build()
                    )
                    .parent(
                        CustomerMinified.builder()
                            .id("id")
                            .externalCustomerId("external_customer_id")
                            .build()
                    )
                    .build()
            )
        assertThat(customer.metadata())
            .isEqualTo(
                Customer.Metadata.builder()
                    .putAdditionalProperty("foo", JsonValue.from("string"))
                    .build()
            )
        assertThat(customer.name()).isEqualTo("name")
        assertThat(customer.paymentProvider()).isEqualTo(Customer.PaymentProvider.QUICKBOOKS)
        assertThat(customer.paymentProviderId()).isEqualTo("payment_provider_id")
        assertThat(customer.portalUrl()).isEqualTo("portal_url")
        assertThat(customer.shippingAddress())
            .isEqualTo(
                Address.builder()
                    .city("city")
                    .country("country")
                    .line1("line1")
                    .line2("line2")
                    .postalCode("postal_code")
                    .state("state")
                    .build()
            )
        assertThat(customer.taxId())
            .isEqualTo(
                CustomerTaxId.builder()
                    .country(CustomerTaxId.Country.AD)
                    .type(CustomerTaxId.Type.AD_NRT)
                    .value("value")
                    .build()
            )
        assertThat(customer.timezone()).isEqualTo("timezone")
        assertThat(customer.accountingSyncConfiguration())
            .isEqualTo(
                Customer.AccountingSyncConfiguration.builder()
                    .addAccountingProvider(
                        Customer.AccountingSyncConfiguration.AccountingProvider.builder()
                            .externalProviderId("external_provider_id")
                            .providerType(
                                Customer.AccountingSyncConfiguration.AccountingProvider.ProviderType
                                    .QUICKBOOKS
                            )
                            .build()
                    )
                    .excluded(true)
                    .build()
            )
        assertThat(customer.reportingConfiguration())
            .isEqualTo(Customer.ReportingConfiguration.builder().exempt(true).build())
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val customer =
            Customer.builder()
                .id("id")
                .addAdditionalEmail("string")
                .autoCollection(true)
                .balance("balance")
                .billingAddress(
                    Address.builder()
                        .city("city")
                        .country("country")
                        .line1("line1")
                        .line2("line2")
                        .postalCode("postal_code")
                        .state("state")
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currency("currency")
                .email("email")
                .emailDelivery(true)
                .exemptFromAutomatedTax(true)
                .externalCustomerId("external_customer_id")
                .hierarchy(
                    Customer.Hierarchy.builder()
                        .addChild(
                            CustomerMinified.builder()
                                .id("id")
                                .externalCustomerId("external_customer_id")
                                .build()
                        )
                        .parent(
                            CustomerMinified.builder()
                                .id("id")
                                .externalCustomerId("external_customer_id")
                                .build()
                        )
                        .build()
                )
                .metadata(
                    Customer.Metadata.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .name("name")
                .paymentProvider(Customer.PaymentProvider.QUICKBOOKS)
                .paymentProviderId("payment_provider_id")
                .portalUrl("portal_url")
                .shippingAddress(
                    Address.builder()
                        .city("city")
                        .country("country")
                        .line1("line1")
                        .line2("line2")
                        .postalCode("postal_code")
                        .state("state")
                        .build()
                )
                .taxId(
                    CustomerTaxId.builder()
                        .country(CustomerTaxId.Country.AD)
                        .type(CustomerTaxId.Type.AD_NRT)
                        .value("value")
                        .build()
                )
                .timezone("timezone")
                .accountingSyncConfiguration(
                    Customer.AccountingSyncConfiguration.builder()
                        .addAccountingProvider(
                            Customer.AccountingSyncConfiguration.AccountingProvider.builder()
                                .externalProviderId("external_provider_id")
                                .providerType(
                                    Customer.AccountingSyncConfiguration.AccountingProvider
                                        .ProviderType
                                        .QUICKBOOKS
                                )
                                .build()
                        )
                        .excluded(true)
                        .build()
                )
                .reportingConfiguration(
                    Customer.ReportingConfiguration.builder().exempt(true).build()
                )
                .build()

        val roundtrippedCustomer =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(customer),
                jacksonTypeRef<Customer>(),
            )

        assertThat(roundtrippedCustomer).isEqualTo(customer)
    }
}
